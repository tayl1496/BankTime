Script started on Tue 20 Nov 2018 12:25:15 PM CST
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% pwd
/home/csugrads/tayl1496/cs1521/projects/project6/oneTeller
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% ls -l
total 124
drwx------ 3 tayl1496 student 4096 Nov 20 12:24 build
-rw------- 1 tayl1496 student  214 Nov 20 12:19 CMakeLists.txt
-rw------- 1 tayl1496 student 1100 Nov 14 17:30 EventBuilder.cpp
-rw------- 1 tayl1496 student 1363 Nov 13 13:34 EventBuilder.h
-rw------- 1 tayl1496 student 1173 Nov 14 15:07 Event.cpp
-rw------- 1 tayl1496 student   47 Nov 11 13:07 Event.cpp~
-rw------- 1 tayl1496 student  838 Nov 14 15:07 Event.h
-rw------- 1 tayl1496 student  750 Nov 11 12:55 Event.h~
-rw------- 1 tayl1496 student   98 Nov 11 12:30 EventType.h
-rwx------ 1 tayl1496 student 2278 Nov 14 14:01 LinkedQueue.cpp
-rwx------ 1 tayl1496 student 1018 Nov 14 14:01 LinkedQueue.h
-rwx------ 1 tayl1496 student 4619 Nov 14 14:01 LinkedSortedList.cpp
-rwx------ 1 tayl1496 student 2162 Nov 14 14:01 LinkedSortedList.h
-rwx------ 1 tayl1496 student 1285 Nov 14 14:01 Node.cpp
-rwx------ 1 tayl1496 student 1829 Nov 14 14:01 Node.h
-rwx------ 1 tayl1496 student  569 Nov 14 14:01 PrecondViolatedExcep.cpp
-rwx------ 1 tayl1496 student  750 Nov 14 14:01 PrecondViolatedExcep.h
-rwx------ 1 tayl1496 student 1429 Nov 14 16:51 PriorityQueue.cpp
-rwx------ 1 tayl1496 student 1052 Nov 14 14:01 PriorityQueue.h
-rwx------ 1 tayl1496 student 1530 Nov 14 14:01 PriorityQueueInterface.h
-rw------- 1 tayl1496 student  125 Nov  3  2016 project6.cpp
-rw------- 1 tayl1496 student 1484 Nov 14 14:16 QueueInterface.h
-rw------- 1 tayl1496 student 3883 Nov 14 17:20 README
-rw------- 1 tayl1496 student 1569 Nov 20 11:49 Simulation.cpp
-rw------- 1 tayl1496 student  474 Nov 14 10:51 Simulation.h
-rwx------ 1 tayl1496 student 3579 Nov 14 14:01 SortedListInterface.h
-rw------- 1 tayl1496 student 1884 Mar 27  2018 Statistics.cpp
-rw------- 1 tayl1496 student  921 Nov 20 12:24 Statistics.h
drwx------ 2 tayl1496 student 4096 Nov 11 13:25 testFiles
-rw------- 1 tayl1496 student   56 Nov 11 13:04 Time.h
-rw------- 1 tayl1496 student    0 Nov 20 12:25 typescript
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -m[Kn CMakeLists.txt 
     1	project(One-Teller)
     2	
     3	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++14")
     4	
     5	add_executable(oneTeller
     6	  project6.cpp
     7	  Event.cpp
     8	  EventBuilder.cpp
     9	  Statistics.cpp
    10	  Simulation.cpp
    11	  PrecondViolatedExcep.cpp)
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n CMakeLists.txt[K[K[K[K[K[K[K[K[K[K[K[K[K[Kproject6.cpp 
     1	#include <cstdlib>
     2	
     3	#include "Simulation.h"
     4	
     5	int main() {
     6	
     7	   Simulation sim;
     8	
     9	   sim.simulate();
    10	
    11	   return EXIT_SUCCESS;
    12	}
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n project6.cpp[K[K[K[K[K[K[K[K[K[K[K[KSim
Simulation.cpp  Simulation.h    
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Simulation.h
     1	#ifndef SIMULATION_
     2	#define SIMULATION_
     3	
     4	#include "Event.h"
     5	#include "EventBuilder.h"
     6	#include "LinkedQueue.h"
     7	#include "PriorityQueue.h"
     8	#include "Statistics.h"
     9	
    10	class Simulation {
    11	private:
    12	   Event currentEvent;
    13	   EventBuilder eventBuilder;
    14	   LinkedQueue<Event> line;
    15	   PriorityQueue<Event> events;
    16	   Statistics stats;
    17	
    18	   void processArrival();
    19	   void processDeparture();
    20	
    21	public:
    22	   Simulation();
    23	   virtual ~Simulation() = default;
    24	
    25	   void simulate();
    26	};
    27	
    28	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Simulation.h[Kcpp
     1	
     2	#include "Event.h"
     3	#include "EventBuilder.h"
     4	#include "LinkedQueue.h"
     5	#include "PriorityQueue.h"
     6	#include "Statistics.h"
     7	
     8	#include "Simulation.h"
     9	
    10	// Event currentEvent;
    11	// EventBuilder eventBuilder;
    12	// LinkedQueue<Event> line;
    13	// PriorityQueue<Event> events;
    14	// Statistics stats;
    15	// Just to remeber what the data names are
    16	
    17	Simulation::Simulation()
    18	{  
    19	}
    20	
    21	void Simulation::processArrival(){
    22	
    23	  if(line.isEmpty()) {
    24	    events.enqueue(eventBuilder.createDepartureEvent
    25			   (currentEvent.getTime(),
    26			    currentEvent.getDuration(),
    27			    currentEvent.getNumber()) );
    28	  }
    29	
    30	  line.enqueue(currentEvent);
    31	  events.dequeue();
    32	  
    33	  Event newEvent = eventBuilder.createArrivalEvent(currentEvent.getNumber() + 1);
    34	
    35	  if (newEvent.getType() == EventType::ARRIVAL) {
    36	    events.enqueue(newEvent);
    37	  }
    38	  
    39	}
    40	
    41	void Simulation::processDeparture(){
    42	  Event aEvent = line.peekFront();
    43	  line.dequeue();
    44	  events.dequeue();
    45	
    46	  if (!line.isEmpty() ) {
    47	    Event DEvent = eventBuilder.createDepartureEvent(currentEvent.getTime(),
    48							     aEvent.getDuration(),
    49							     currentEvent.getNumber() + 1);
    50	    events.enqueue(DEvent);
    51	  }
    52	}
    53	
    54	void Simulation::simulate(){
    55	  Event initialArrival = eventBuilder.createArrivalEvent(1);
    56	
    57	  if (initialArrival.getType() == EventType::ARRIVAL) {
    58	    events.enqueue(initialArrival);
    59	  }
    60	  while (!events.isEmpty()) {
    61	    currentEvent = events.peekFront();
    62	    if (currentEvent.getType() == EventType::ARRIVAL) {
    63	      processArrival();
    64	    } else {
    65	      processDeparture();
    66	    }
    67	    stats.addEvent(currentEvent);
    68	
    69	  }
    70	  stats.reportStats();
    71	}
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Simulation.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[KEvt[KentType.h 
     1	#ifndef EVENT_TYPE_H
     2	#define EVENT_TYPE_H
     3	
     4	enum class EventType {NONE,ARRIVAL,DEPARTURE};
     5	
     6	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n EventType.h[K[K[K[K[K[K[K[K[K[K[KTime.h
     1	#ifndef TIME_H
     2	#define TIME_H
     3	
     4	typedef int Time;
     5	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Time.h[K[K[K[K[K[KEventBui
EventBuilder.cpp  EventBuilder.h    
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n EventBuilder.h
     1	#ifndef EVENT_BUILDER_
     2	#define EVENT_BUILDER_
     3	
     4	#include <fstream>
     5	
     6	#include "Event.h"
     7	
     8	class EventBuilder {
     9	private:
    10	   std::ifstream inputFile;
    11	
    12	public:
    13	   /** Three things must happen to create an EventBuilder:
    14	    *  1) Prompt the user for the name of an input file
    15	    *  2) Attempt to open this file on the 'inputFile' data member
    16	    *  3) If the file doesn't open, repeat steps 1 and 2 */
    17	   EventBuilder();
    18	
    19	   /** Create and return an event with members:
    20	    *  type == EventType::ARRIVAL
    21	    *  number == input argument 'number'
    22	    *  time == time read from 'inputFile'
    23	    *  duration == transaction length read from 'inputFile'
    24	    *
    25	    *  If 'inputFile' has been completely read (EOF has been reached),
    26	    *  then set the return event.type field to EventType::NONE.  This
    27	    *  can then be used to tell when the external file is either empty
    28	    *  or EOF has been reached. */
    29	   Event createArrivalEvent(int number);
    30	
    31	   /** Create and return an event with members:
    32	    *  type == EventType::DEPATURE
    33	    *  number == input argument 'number'
    34	    *  time == 'currentEventTime' + 'transactionLength'
    35	    *
    36	    *  The duration field is unused for departure type events. */
    37	   Event createDepartureEvent(const Time& currentEventTime,
    38	                              const Time& transactionLength,
    39	                              int number);
    40	};
    41	
    42	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n EventBuilder.h[Kcpp
     1	
     2	#include <string>
     3	#include <iostream>
     4	
     5	#include "EventType.h"
     6	#include "Statistics.h"
     7	#include "Time.h"
     8	#include "Event.h"
     9	#include "EventBuilder.h"
    10	
    11	EventBuilder::EventBuilder(){
    12	  std::string s = "";
    13	  
    14	  do {
    15	    std::cout<<"Enter File Name: ";
    16	    std::cin>>s;  
    17	
    18	    inputFile.open(s.c_str() );
    19	    
    20	    if (!inputFile){
    21	      std::cerr<<"ERROR: File Not Found" <<std::endl;
    22	    }
    23	    
    24	  } while (!inputFile);
    25	}
    26	
    27	Event EventBuilder::createArrivalEvent(int number) {
    28	 Event aEvent;
    29	 Time aTime, lengthTime;
    30	 
    31	
    32	if (inputFile >> aTime >> lengthTime) {
    33	
    34	aEvent.setTime(aTime);
    35	aEvent.setDuration(lengthTime);
    36	aEvent.setNumber(number);
    37	
    38	} else {
    39	
    40	aEvent.setNumber(0);
    41	
    42	}
    43	
    44	 if (inputFile.eof()) {
    45	aEvent.setEventType(EventType::NONE);
    46	 } else {
    47	  aEvent.setEventType(EventType::ARRIVAL);
    48	 }
    49	
    50	  return aEvent;
    51	}
    52	
    53	Event EventBuilder::createDepartureEvent(const Time& currentEventTime,
    54						 const Time& transactionLength,
    55						 int number)
    56	{
    57	  Event aEvent;
    58	
    59	aEvent.setEventType(EventType::DEPARTURE);
    60	aEvent.setTime(currentEventTime + transactionLength);
    61	aEvent.setNumber(number);
    62	
    63	  return aEvent;
    64	}
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n EventBuilder.cpp[K[K[K[K[K[K[K[K[K[K[K.h
     1	#ifndef EVENT_H
     2	#define EVENT_H
     3	
     4	#include <iostream>
     5	
     6	#include "Time.h"
     7	#include "EventType.h"
     8	
     9	class Event {
    10	
    11	 private:
    12	  
    13	  EventType type;
    14	  Time time;
    15	  Time duration;
    16	  int number;
    17	  int tellerNum = 1;
    18	
    19	 public:
    20	
    21	  Event() = default;
    22	  ~Event() = default;
    23	  
    24	  void setEventType(const EventType&);
    25	  void setTime(const Time&);
    26	  void setDuration(const Time&);
    27	  void setNumber(const int&);
    28	  void setTellerNum(const int&);
    29	  
    30	  EventType getType() const;
    31	  Time getTime() const;
    32	  Time getDuration() const;
    33	  int getNumber() const;
    34	  int getTellerNum() const;
    35	
    36	  bool operator> (const Event& rhs) const;
    37	  bool operator< (const Event& rhs) const;
    38	  bool operator<=(const Event& rhs) const;
    39	  bool operator>=(const Event& rhs) const;
    40	  bool operator==(const Event& rhs) const;
    41	  bool operator!=(const Event& rhs) const;
    42	  
    43	};
    44	
    45	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Event.h[K[K[Kt.cpp
     1	
     2	#include <string>
     3	
     4	#include "EventType.h"
     5	#include "EventBuilder.h"
     6	
     7	void Event::setEventType(const EventType& type){
     8	  this->type = type;
     9	}
    10	
    11	void Event::setTime(const Time& time){
    12	  this->time = time;
    13	}
    14	
    15	void Event::setDuration(const Time& duration){
    16	  this->duration = duration;
    17	}
    18	
    19	void Event::setNumber(const int& number){
    20	  this->number = number;
    21	}
    22	
    23	void Event::setTellerNum(const int& tellerNum){
    24	  this->tellerNum = tellerNum;
    25	}
    26	
    27	EventType Event::getType() const {
    28	  return type;
    29	}
    30	
    31	Time Event::getTime() const {
    32	  return time;
    33	}
    34	
    35	Time Event::getDuration() const {
    36	  return duration;
    37	}
    38	
    39	int Event::getNumber() const {
    40	  return number;
    41	}
    42	
    43	int Event::getTellerNum() const {
    44	  return tellerNum;
    45	}
    46	
    47	bool Event::operator> (const Event& rhs) const {
    48	  return time < rhs.time;
    49	}
    50	
    51	bool Event::operator< (const Event& rhs) const {
    52	  return time < rhs.time;
    53	}
    54	
    55	bool Event::operator<=(const Event& rhs) const {
    56	  return time <= rhs.time;
    57	}
    58	
    59	bool Event::operator>=(const Event& rhs) const {
    60	  return time >= rhs.time;
    61	}
    62	
    63	bool Event::operator==(const Event& rhs) const {
    64	  return time == rhs.time;
    65	}
    66	
    67	bool Event::operator!=(const Event& rhs) const {
    68	  return time != rhs.time;
    69	}
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Event.cpp[K[K[K[K[K[K[K[K[KSts[Ka
Statistics.cpp  Statistics.h    
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Statistics.h
     1	#ifndef STATISTICS_
     2	#define STATISTICS_
     3	
     4	//#define TESTING
     5	
     6	#include "Event.h"
     7	#include "LinkedQueue.h"
     8	
     9	class Statistics {
    10	private:
    11	   int count = 0;
    12	
    13	   Time waitTime = 0;
    14	
    15	   /** Arrival events get stored until we encounter the next departure
    16	    *  event.  This arrival along with the departure are then used to
    17	    *  generate the wait time of this arrival. */
    18	   LinkedQueue<Event> arrivalEvents;
    19	
    20	public:
    21	   Statistics() = default;
    22	
    23	   virtual ~Statistics() = default;
    24	
    25	   /** Adds 'event' to the statistics collected so far.
    26	    *
    27	    * If 'event' is an arrival event, increment 'count' and store it
    28	    * for use with the next departure event.
    29	    *
    30	    * If 'event' is a departure event, calculate the wait time for
    31	    * this customer and add it onto 'waitTime'. */
    32	   void addEvent(const Event& event);
    33	
    34	   /** Output a report of the statistics for this simulation. */
    35	   void reportStats() const;
    36	};
    37	
    38	#endif
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cat -n Statistics.h[Kcpp
     1	#include <iostream>
     2	
     3	#include "Statistics.h"
     4	
     5	void Statistics::addEvent(const Event& event) {
     6	
     7	   if (event.getType() == EventType::ARRIVAL) {
     8	#ifdef TESTING
     9	      std::cout << "Processing arrival event "
    10	                << event.getNumber()
    11	                << " at time: "
    12	                << event.getTime()
    13	                << std::endl;
    14	#endif
    15	
    16	#ifndef TESTING
    17	      std::cout << ".";
    18	
    19	      if (event.getNumber() % 72 == 0)
    20	         std::cout << std::endl;
    21	#endif
    22	      arrivalEvents.enqueue(event);
    23	      ++count;
    24	   }
    25	   else { // event is a departure event
    26	#ifdef TESTING
    27	      std::cout << "Processing departure event "
    28	                << event.getNumber()
    29	                << " at time: "
    30	                << event.getTime();
    31	#endif
    32	      if (!arrivalEvents.isEmpty() ) {
    33	         Event arrivalEvent;
    34	
    35	         arrivalEvent = arrivalEvents.peekFront();
    36	         arrivalEvents.dequeue();
    37	         waitTime += event.getTime() -
    38	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    39	#ifdef TESTING
    40	         std::cout << " event "
    41	                   << arrivalEvent.getNumber()
    42	                   << " waited: "
    43	                   << event.getTime() -
    44	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    45	#endif
    46	      }
    47	#ifdef TESTING
    48	      else {
    49	         std::cout << " no events waiting.";
    50	      }
    51	      std::cout << std::endl;
    52	#endif
    53	   }
    54	}
    55	
    56	void Statistics::reportStats() const {
    57	
    58	   std::cout << "Final Statistics:"
    59	             << std::endl;
    60	
    61	   std::cout << "\tTotal number of people processed: "
    62	             << count
    63	             << std::endl;
    64	
    65	   std::cout << "\tTotal wait time: "
    66	             << waitTime
    67	             << std::endl;
    68	
    69	   std::cout << "\tAverage amount of time spent waiting: ";
    70	   if (count != 0) {
    71	      std::cout << (double)waitTime / (double)count;
    72	   }
    73	   else {
    74	      std::cout << 0.0;
    75	   }
    76	   std::cout << std::endl;
    77	}
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller[0m% cd build/
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/csugrads/tayl1496/cs1521/projects/project6/oneTeller/build
[35m[1mScanning dependencies of target oneTeller[0m
[ 14%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/project6.cpp.o[0m
[ 28%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/Event.cpp.o[0m
[ 42%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/EventBuilder.cpp.o[0m
[ 57%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/Statistics.cpp.o[0m
[ 71%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/Simulation.cpp.o[0m
[ 85%] [32mBuilding CXX object CMakeFiles/oneTeller.dir/PrecondViolatedExcep.cpp.o[0m
[100%] [32m[1mLinking CXX executable oneTeller[0m
[100%] Built target oneTeller
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller 
Enter File Name: input0.dat
....Final Statistics:
	Total number of people processed: 4
	Total wait time: 46
	Average amount of time spent waiting: 11.5
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input1.dat
Final Statistics:
	Total number of people processed: 0
	Total wait time: 0
	Average amount of time spent waiting: 0
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input2.dat
....Final Statistics:
	Total number of people processed: 4
	Total wait time: 0
	Average amount of time spent waiting: 0
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input3.dat
.....Final Statistics:
	Total number of people processed: 5
	Total wait time: 17
	Average amount of time spent waiting: 3.4
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input4.dat
..........Final Statistics:
	Total number of people processed: 10
	Total wait time: 56
	Average amount of time spent waiting: 5.6
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input5.dat
........................................................................
........................................................................
......Final Statistics:
	Total number of people processed: 150
	Total wait time: 1887
	Average amount of time spent waiting: 12.58
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input6.dat
........................................................................
........................................................................
........................................................................
........................................................................
............Final Statistics:
	Total number of people processed: 300
	Total wait time: 48748
	Average amount of time spent waiting: 162.493
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% ./oneTeller
Enter File Name: input7.dat
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
....................................................................Final Statistics:
	Total number of people processed: 500
	Total wait time: 83836
	Average amount of time spent waiting: 167.672
[4makka[24m:[1m~/cs1521/projects/project6/oneTeller/build[0m% exit
exit

Script done on Tue 20 Nov 2018 12:28:51 PM CST
