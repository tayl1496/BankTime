Script started on Tue 20 Nov 2018 12:32:48 PM CST
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% pwd
/home/csugrads/tayl1496/cs1521/projects/project6/threeTeller
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% ls -l
total 124
drwx------ 3 tayl1496 student 4096 Nov 20 12:31 build
-rw------- 1 tayl1496 student  218 Nov 20 11:41 CMakeLists.txt
-rw------- 1 tayl1496 student 1147 Nov 19 10:05 EventBuilder.cpp
-rw------- 1 tayl1496 student 1423 Nov 20 11:49 EventBuilder.h
-rw------- 1 tayl1496 student 1112 Nov 19 12:57 Event.cpp
-rw------- 1 tayl1496 student  749 Nov 19 10:04 Event.h
-rw------- 1 tayl1496 student   96 Nov 15 16:05 EventType.h
-rwx------ 1 tayl1496 student 2479 Nov 20 10:18 LinkedQueue.cpp
-rwx------ 1 tayl1496 student 1052 Nov 20 10:17 LinkedQueue.h
-rwx------ 1 tayl1496 student 4619 Nov 14 14:01 LinkedSortedList.cpp
-rwx------ 1 tayl1496 student 2162 Nov 14 14:01 LinkedSortedList.h
-rwx------ 1 tayl1496 student 1285 Nov 14 14:01 Node.cpp
-rwx------ 1 tayl1496 student 1829 Nov 14 14:01 Node.h
-rwx------ 1 tayl1496 student  569 Nov 14 14:01 PrecondViolatedExcep.cpp
-rwx------ 1 tayl1496 student  750 Nov 14 14:01 PrecondViolatedExcep.h
-rwx------ 1 tayl1496 student 1393 Nov 19 10:53 PriorityQueue.cpp
-rwx------ 1 tayl1496 student 1054 Nov 19 10:53 PriorityQueue.h
-rwx------ 1 tayl1496 student 1530 Nov 14 14:01 PriorityQueueInterface.h
-rw------- 1 tayl1496 student  125 Nov  3  2016 project6.cpp
-rw------- 1 tayl1496 student 1484 Nov 14 15:21 QueueInterface.h
-rw------- 1 tayl1496 student 6032 Nov 19 10:52 README
-rw------- 1 tayl1496 student 3117 Nov 20 12:16 Simulation.cpp
-rw------- 1 tayl1496 student  533 Nov 19 14:06 Simulation.h
-rwx------ 1 tayl1496 student 3579 Nov 14 14:01 SortedListInterface.h
-rw------- 1 tayl1496 student 4536 Nov  3  2016 Statistics.cpp
-rw------- 1 tayl1496 student 1291 Nov 20 12:24 Statistics.h
drwx------ 2 tayl1496 student 4096 Nov 11 13:13 testFiles
-rw------- 1 tayl1496 student   55 Nov 15 15:55 Time.h
-rw------- 1 tayl1496 student    0 Nov 20 12:32 typescript
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n CMakeLists.txt 
     1	project(Three-Teller)
     2	
     3	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++14")
     4	
     5	add_executable(threeTeller
     6	  project6.cpp
     7	  Simulation.cpp
     8	  Event.cpp
     9	  Statistics.cpp
    10	  PrecondViolatedExcep.cpp
    11	  EventBuilder.cpp)
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n CMakeLists.txt[K[K[K[K[K[K[K[K[K[K[K[K[K[Kproject6.cpp 
     1	#include <cstdlib>
     2	
     3	#include "Simulation.h"
     4	
     5	int main() {
     6	
     7	   Simulation sim;
     8	
     9	   sim.simulate();
    10	
    11	   return EXIT_SUCCESS;
    12	}
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n project6.cpp[K[K[K[K[K[K[K[K[K[K[K[KSim
Simulation.cpp  Simulation.h    
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Simulation.h
     1	#ifndef SIMULATION_
     2	#define SIMULATION_
     3	
     4	#include "Event.h"
     5	#include "EventBuilder.h"
     6	#include "LinkedQueue.h"
     7	#include "PriorityQueue.h"
     8	#include "Statistics.h"
     9	
    10	class Simulation {
    11	private:
    12	   Event currentEvent;
    13	   EventBuilder eventBuilder;
    14	   LinkedQueue<Event> line1;
    15	   LinkedQueue<Event> line2;
    16	   LinkedQueue<Event> line3;
    17	   PriorityQueue<Event> events;
    18	   Statistics stats;
    19	
    20	   void processArrival();
    21	   void processDeparture();
    22	
    23	public:
    24	   Simulation();
    25	   virtual ~Simulation() = default;
    26	
    27	   void simulate();
    28	};
    29	
    30	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Simulation.h[Kcpp
     1	
     2	#include <iostream>
     3	
     4	#include "Simulation.h"
     5	#include "Statistics.h"
     6	#include "EventBuilder.h"
     7	#include "Event.h"
     8	#include "PriorityQueue.h"
     9	#include "Time.h"
    10	#include "EventType.h"
    11	
    12	Simulation::Simulation() {}
    13	
    14	void Simulation::processArrival() {
    15	
    16	  int leg1 = line1.getLength();
    17	  int leg2 = line2.getLength();
    18	  int leg3 = line3.getLength();
    19	  int min;
    20	
    21	  if (leg1 <= leg2 && leg1 <= leg3)
    22	    min = leg1;
    23	  else if (leg2 <= leg3)
    24	    min = leg2;
    25	  else
    26	    min = leg3;
    27	  
    28	  if (min == leg1) {
    29	    currentEvent.setLine(1);
    30	  } else if (min == leg2) {
    31	    currentEvent.setLine(2);
    32	  } else {
    33	    currentEvent.setLine(3);
    34	  }
    35	  
    36	  if (currentEvent.getLine() == 1) {
    37	    events.dequeue();
    38	   if(line1.isEmpty()) {
    39	    events.enqueue(eventBuilder.createDepartureEvent
    40			   (currentEvent.getTime(),
    41			    currentEvent.getDuration(),
    42			    currentEvent.getNumber(), 1));
    43	   }
    44	   line1.enqueue(currentEvent);
    45	   events.dequeue();
    46	  } else if (currentEvent.getLine() == 2) {
    47	    events.dequeue();
    48	     if(line2.isEmpty()) {
    49	    events.enqueue(eventBuilder.createDepartureEvent
    50			   (currentEvent.getTime(),
    51			    currentEvent.getDuration(),
    52			    currentEvent.getNumber(), 2));
    53	  }
    54	  line2.enqueue(currentEvent);
    55	  } else {
    56	    events.dequeue();
    57	     if(line3.isEmpty()) {
    58	    events.enqueue(eventBuilder.createDepartureEvent
    59			   (currentEvent.getTime(),
    60			    currentEvent.getDuration(),
    61			    currentEvent.getNumber(), 3));
    62	  }
    63	     line3.enqueue(currentEvent);
    64	  }
    65	
    66	  Event newEvent = eventBuilder.createArrivalEvent(currentEvent.getNumber() + 1, currentEvent.getLine());
    67	
    68	  if (newEvent.getType() == EventType::ARRIVAL) {
    69	    events.enqueue(newEvent);
    70	  } 
    71	}
    72	
    73	void Simulation::processDeparture() {
    74	  Event aEvent = events.peekFront();
    75	  events.dequeue();
    76	  
    77	  switch ( (int)aEvent.getLine() ) {
    78	  case 1:
    79	    
    80	    line1.dequeue();
    81	    if (!line1.isEmpty() ) {
    82	    Event DEvent1 = eventBuilder.createDepartureEvent(currentEvent.getTime(),
    83							     aEvent.getDuration(),
    84							      currentEvent.getNumber() + 1, 1);
    85	    events.enqueue(DEvent1);
    86	    }
    87	    break;
    88	  case 2:
    89	    line2.dequeue();
    90	    if (!line2.isEmpty() ) {
    91	      Event DEvent2 = eventBuilder.createDepartureEvent(currentEvent.getTime(),
    92								aEvent.getDuration(),
    93								currentEvent.getNumber() + 1,
    94								2);
    95	    events.enqueue(DEvent2);
    96	    }
    97	    break;
    98	  case 3:
    99	    line3.dequeue();
   100	    if (!line3.isEmpty() ) {
   101	      Event DEvent3 = eventBuilder.createDepartureEvent(currentEvent.getTime(),
   102								aEvent.getDuration(),
   103								currentEvent.getNumber() + 1,
   104								3);
   105	    events.enqueue(DEvent3);
   106	    }
   107	    break;
   108	  default:
   109	    std::cout<<"This Line doesn't EXIST!!";
   110	    break;
   111	  }	     
   112	}
   113	
   114	void Simulation::simulate() {
   115	  Event initialArrival = eventBuilder.createArrivalEvent(1,1);
   116	
   117	  if (initialArrival.getType() == EventType::ARRIVAL) {
   118	    events.enqueue(initialArrival);
   119	  }
   120	  while (!events.isEmpty() ) {
   121	    currentEvent = events.peekFront();
   122	    if (currentEvent.getType() == EventType::ARRIVAL) {
   123	      processArrival();
   124	    } else {
   125	      processDeparture();
   126	    }
   127	    stats.addEvent(currentEvent);
   128	  }
   129	  stats.reportStats();
   130	}
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Simulation.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[KEventType.h 
     1	#ifndef EVENT_TYPE_H
     2	#define EVENT_TYPE_H
     3	enum class EventType {NONE,ARRIVAL,DEPARTURE};
     4	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n EventType.h[K[K[K[K[K[K[K[K[K[K[KTime.g[Kh
     1	#ifndef TIME_H
     2	#define TIME_H
     3	typedef int Time;
     4	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Time.h[K[K[K[K[K[KEventB
EventBuilder.cpp  EventBuilder.h    
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n EventBuilder.h
     1	#ifndef EVENT_BUILDER_
     2	#define EVENT_BUILDER_
     3	
     4	#include <fstream>
     5	
     6	#include "Event.h"
     7	
     8	class EventBuilder {
     9	private:
    10	   std::ifstream inputFile;
    11	
    12	public:
    13	   /** Three things must happen to create an EventBuilder:
    14	    *  1) Prompt the user for the name of an input file
    15	    *  2) Attempt to open this file on the 'inputFile' data member
    16	     *  3) If the file doesn't open, repeat steps 1 and 2 */
    17	   EventBuilder();
    18	
    19	   /** Create and return an event with members:
    20	    *  type == EventType::ARRIVAL
    21	    *  number == input argument 'number'
    22	    *  time == time read from 'inputFile'
    23	    *  duration == transaction length read from 'inputFile'
    24	    *
    25	    *  If 'inputFile' has been completely read (EOF has been reached),
    26	    *  then set the return event.type field to EventType::NONE.  This
    27	    *  can then be used to tell when the external file is either empty
    28	    *  or EOF has been reached. */
    29	   Event createArrivalEvent(const int number, const int LineNum);
    30	
    31	   /** Create and return an event with members:
    32	    *  type == EventType::DEPATURE
    33	    *  number == input argument 'number'
    34	    *  time == 'currentEventTime' + 'transactionLength'
    35	    *
    36	    *  The duration field is unused for departure type events. */
    37	   Event createDepartureEvent(const Time& currentEventTime,
    38	                              const Time& transactionLength,
    39	                              const int number,
    40				      const int LineNum);
    41	};
    42	
    43	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n EventBuilder.h[Kcpp
     1	
     2	#include <iostream>
     3	#include <string>
     4	
     5	#include "Time.h"
     6	#include "EventType.h"
     7	#include "Event.h"
     8	#include "EventBuilder.h"
     9	
    10	EventBuilder::EventBuilder(){
    11	  std::string s = "";
    12	
    13	  do {
    14	    std::cout<<"Enter File Name: ";
    15	    std::cin>>s;
    16	
    17	    inputFile.open(s.c_str() );
    18	
    19	    if (!inputFile){
    20	      std::cerr<<"ERROR: File Not Found" <<std::endl;
    21	    }
    22	
    23	  } while (!inputFile);
    24	}
    25	
    26	Event EventBuilder::createArrivalEvent(const int number, const int LineNum){
    27	Event aEvent;
    28	 aEvent.setType(EventType::ARRIVAL);
    29	 
    30	Time aTime, lengthTime;
    31	
    32	if (inputFile >> aTime >> lengthTime) {
    33	  aEvent.setTime(aTime);
    34	  aEvent.setDuration(lengthTime);
    35	  aEvent.setNumber(number);
    36	  aEvent.setLine(LineNum);
    37	} else {
    38	  aEvent.setNumber(0);
    39	}
    40	
    41	if (inputFile.eof()) {
    42	  aEvent.setType(EventType::NONE);
    43	}
    44	return aEvent;
    45	}
    46	
    47	Event EventBuilder::createDepartureEvent(const Time& currentEventTime,
    48						 const Time& transactionLength,
    49						 const int number,
    50						 const int LineNum)
    51	{
    52	  Event aEvent;
    53	
    54	 aEvent.setType(EventType::DEPARTURE);
    55	 aEvent.setTime(currentEventTime + transactionLength);
    56	 aEvent.setNumber(number);
    57	 aEvent.setLine(LineNum);
    58	
    59	 return aEvent;
    60	}
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n EventBuilder.cpp[K[K[K[K[K[K[K[K[K[K[K.h
     1	#ifndef EVENT_H
     2	#define EVENT_H
     3	
     4	#include "Time.h"
     5	#include "EventType.h"
     6	
     7	class Event {
     8	
     9	private:
    10	  
    11	  EventType type;
    12	  Time time;
    13	  Time duration;
    14	  int number;
    15	  int line;
    16	
    17	public:
    18	  
    19	  void setType(const EventType&);
    20	  void setTime(const Time&);
    21	  void setDuration(const Time&);
    22	  void setNumber(const int&);
    23	  void setLine(const int&);
    24	  
    25	  EventType getType() const;
    26	  Time getTime() const;
    27	  Time getDuration() const;
    28	  int getNumber() const;
    29	  int getLine() const;
    30	  
    31	  bool operator> (const Event& rhs) const;
    32	  bool operator< (const Event& rhs) const;
    33	  bool operator<=(const Event& rhs) const;
    34	  bool operator>=(const Event& rhs) const;
    35	  bool operator==(const Event& rhs) const;
    36	  bool operator!=(const Event& rhs) const;
    37	  
    38	};
    39	
    40	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Event.h[Kcpp
     1	
     2	#include "Event.h"
     3	#include "EventType.h"
     4	
     5	void Event::setType(const EventType& type){
     6	  this->type = type;
     7	}
     8	
     9	void Event::setTime(const Time& time){
    10	  this->time = time;
    11	}
    12	
    13	void Event::setDuration(const Time& duration){
    14	  this->duration = duration;
    15	}
    16	
    17	void Event::setNumber(const int& number){
    18	  this->number = number;
    19	}
    20	
    21	void Event::setLine(const int& line){
    22	  this->line = line;
    23	}
    24	
    25	EventType Event::getType() const {
    26	  return type;
    27	}
    28	
    29	Time Event::getTime() const {
    30	  return time;
    31	}
    32	
    33	Time Event::getDuration() const {
    34	  return duration;
    35	}
    36	
    37	int Event::getNumber() const {
    38	  return number;
    39	}
    40	
    41	int Event::getLine() const {
    42	  return line;
    43	}
    44	
    45	bool Event::operator> (const Event& rhs) const {
    46	  return time < rhs.time;
    47	}
    48	
    49	bool Event::operator< (const Event& rhs) const {
    50	  return time < rhs.time;
    51	}
    52	
    53	bool Event::operator<=(const Event& rhs) const {
    54	  return time <= rhs.time;
    55	}
    56	
    57	bool Event::operator>=(const Event& rhs) const {
    58	  return time >= rhs.time;
    59	}
    60	
    61	bool Event::operator==(const Event& rhs) const {
    62	  return time == rhs.time;
    63	}
    64	
    65	bool Event::operator!=(const Event& rhs) const {
    66	  return time != rhs.time;
    67	}
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Event.cpp[K[K[K[K[K[K[K[K[KStatisc[Ktisc[K[Kcs.h
     1	#ifndef STATISTICS_
     2	#define STATISTICS_
     3	
     4	//#define TESTING
     5	
     6	#include "Event.h"
     7	#include "LinkedQueue.h"
     8	
     9	class Statistics {
    10	private:
    11	   int countTotal = 0;
    12	
    13	   int count1 = 0;
    14	   int count2 = 0;
    15	   int count3 = 0;
    16	
    17	   Time waitTimeTotal = 0;
    18	
    19	   Time waitTime1 = 0;
    20	   Time waitTime2 = 0;
    21	   Time waitTime3 = 0;
    22	
    23	   /** Arrival events get stored until we encounter the next departure
    24	    *  event.  This arrival along with the departure are then used to
    25	    *  generate the wait time of this arrival. */
    26	   LinkedQueue<Event> arrivalEvents1;
    27	   LinkedQueue<Event> arrivalEvents2;
    28	   LinkedQueue<Event> arrivalEvents3;
    29	
    30	public:
    31	   Statistics() = default;
    32	
    33	   virtual ~Statistics() = default;
    34	
    35	   /** Adds 'event' to the statistics collected so far.
    36	    *
    37	    * If 'event' is an arrival event, increment 'countTotal' and the
    38	    * count associated with the line this customer is in and store it
    39	    * for use with the next departure event.
    40	    *
    41	    * If 'event' is a departure event, calculate the wait time for
    42	    * this customer and add it onto 'waitTimeTotal' and add it to the
    43	    * wait time associated with the line this customer was in. */
    44	   void addEvent(const Event& event);
    45	
    46	   /** Output a report of the statistics for this simulation. */
    47	   void reportStats() const;
    48	};
    49	
    50	#endif
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cat -n Statistics.h[Kcpp
     1	#include <iostream>
     2	
     3	#include "Statistics.h"
     4	
     5	void Statistics::addEvent(const Event& event) {
     6	
     7	   if (event.getType() == EventType::ARRIVAL) {
     8	#ifdef TESTING
     9	      std::cout << "Processing arrival event "
    10	                << event.getNumber()
    11	                << " in queue "
    12	                << event.getLine()
    13	                << " at time "
    14	                << event.getTime()
    15	                << std::endl;
    16	#endif
    17	
    18	#ifndef TESTING
    19	      std::cout << ".";
    20	
    21	      if (event.getNumber() % 72 == 0)
    22	         std::cout << std::endl;
    23	#endif
    24	
    25	      ++countTotal;
    26	
    27	      if (event.getLine() == 1) {
    28	         arrivalEvents1.enqueue(event);
    29	         ++count1;
    30	      }
    31	      else if (event.getLine() == 2) {
    32	         arrivalEvents2.enqueue(event);
    33	         ++count2;
    34	      }
    35	      else {
    36	         arrivalEvents3.enqueue(event);
    37	         ++count3;
    38	      }
    39	   }
    40	
    41	   // Use departures to calculate total wait time and cumulative wait
    42	   // time for each line.
    43	   else {
    44	#ifdef TESTING
    45	      std::cout << "Processing departure event "
    46	                << event.getNumber()
    47	                << " at time: "
    48	                << event.getTime()
    49	                << " in line number "
    50	                << event.getLine();
    51	#endif
    52	      Event arrivalEvent;
    53	      bool eventWaiting(false);
    54	
    55	      if (event.getLine() == 1 && !arrivalEvents1.isEmpty() ) {
    56	         arrivalEvent = arrivalEvents1.peekFront();
    57	         arrivalEvents1.dequeue();
    58	         waitTime1 += event.getTime() -
    59	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    60	         eventWaiting = true;
    61	      }
    62	      else if (event.getLine() == 2 && !arrivalEvents2.isEmpty() ) {
    63	         arrivalEvent = arrivalEvents2.peekFront();
    64	         arrivalEvents2.dequeue();
    65	         waitTime2 += event.getTime() -
    66	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    67	         eventWaiting = true;
    68	      }
    69	      else if (event.getLine() == 3 && !arrivalEvents3.isEmpty() ) {
    70	         arrivalEvent = arrivalEvents3.peekFront();
    71	         arrivalEvents3.dequeue();
    72	         waitTime3 += event.getTime() -
    73	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    74	         eventWaiting = true;
    75	      }
    76	
    77	      if (eventWaiting) {
    78	#ifdef TESTING
    79	         std::cout << " event "
    80	                   << arrivalEvent.getNumber()
    81	                   << " waited: "
    82	                   << event.getTime() -
    83	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    84	#endif
    85	         waitTimeTotal += event.getTime() -
    86	            (arrivalEvent.getTime() + arrivalEvent.getDuration() );
    87	      }
    88	#ifdef TESTING
    89	      else {
    90	         std::cout << " no events waiting.";
    91	      }
    92	      std::cout << std::endl;
    93	#endif
    94	   }
    95	}
    96	
    97	void Statistics::reportStats() const {
    98	
    99	   std::cout << "Final Statistics:"
   100	             << std::endl;
   101	
   102	   std::cout << "\tTotal number of people processed: "
   103	             << countTotal
   104	             << std::endl;
   105	
   106	   std::cout << "\tTotal wait time: "
   107	             << waitTimeTotal
   108	             << std::endl;
   109	
   110	   std::cout << "\tAverage amount of time spent waiting: ";
   111	   if (countTotal != 0) {
   112	      std::cout << (double)waitTimeTotal / (double)countTotal;
   113	   }
   114	   else {
   115	      std::cout << 0.0;
   116	   }
   117	   std::cout << std::endl;
   118	
   119	   std::cout << "\n\tTotals for Teller 1:"
   120	             << std::endl;
   121	
   122	   std::cout << "\t\tPeople processed: "
   123	             << count1
   124	             << std::endl;
   125	
   126	   std::cout << "\t\tWait time: "
   127	             << waitTime1
   128	             << std::endl;
   129	
   130	   std::cout << "\t\tAverage wait time: ";
   131	   if (count1 != 0) {
   132	      std::cout << (double)waitTime1 / (double)count1;
   133	   }
   134	   else {
   135	      std::cout << 0.0;
   136	   }
   137	   std::cout << std::endl;
   138	
   139	   std::cout << "\n\tTotals for Teller 2:"
   140	             << std::endl;
   141	
   142	   std::cout << "\t\tPeople processed: "
   143	             << count2
   144	             << std::endl;
   145	
   146	   std::cout << "\t\tWait time: "
   147	             << waitTime2
   148	             << std::endl;
   149	
   150	   std::cout << "\t\tAverage wait time: ";
   151	   if (count2 != 0) {
   152	      std::cout << (double)waitTime2 / (double)count2;
   153	   }
   154	   else {
   155	      std::cout << 0.0;
   156	   }
   157	   std::cout << std::endl;
   158	
   159	   std::cout << "\n\tTotals for Teller 3:"
   160	             << std::endl;
   161	
   162	   std::cout << "\t\tPeople processed: "
   163	           << count3
   164	           << std::endl;
   165	
   166	   std::cout << "\t\tWait time: "
   167	             << waitTime3
   168	             << std::endl;
   169	
   170	   std::cout << "\t\tAverage wait time: ";
   171	   if (count3 != 0) {
   172	      std::cout << (double)waitTime3 / (double)count3;
   173	   }
   174	   else {
   175	      std::cout << 0.0;
   176	   }
   177	   std::cout << std::endl;
   178	}
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller[0m% cd  b[Kbuild/
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% make
[35m[1mScanning dependencies of target threeTeller[0m
[ 14%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/project6.cpp.o[0m
[ 28%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/Simulation.cpp.o[0m
[ 42%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/Event.cpp.o[0m
[ 57%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/Statistics.cpp.o[0m
[ 71%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/PrecondViolatedExcep.cpp.o[0m
[ 85%] [32mBuilding CXX object CMakeFiles/threeTeller.dir/EventBuilder.cpp.o[0m
[100%] [32m[1mLinking CXX executable threeTeller[0m
[100%] Built target threeTeller
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller 
Enter File Name: input0.dat
....Final Statistics:
	Total number of people processed: 4
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 1
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 3
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 0
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input1.dat
Final Statistics:
	Total number of people processed: 0
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 0
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 0
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 0
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input2.dat
....Final Statistics:
	Total number of people processed: 4
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 2
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 1
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 1
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input3.dat
.....Final Statistics:
	Total number of people processed: 5
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 1
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 1
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 3
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input4.dat
..........Final Statistics:
	Total number of people processed: 10
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 2
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 2
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 6
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input5.dat
........................................................................
........................................................................
......Final Statistics:
	Total number of people processed: 150
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 50
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 49
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 51
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input5.dat
........................................................................
........................................................................
......Final Statistics:
	Total number of people processed: 150
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 50
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 49
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 51
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input6.dat
........................................................................
........................................................................
........................................................................
........................................................................
............Final Statistics:
	Total number of people processed: 300
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 100
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 100
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 100
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ./threeTeller
Enter File Name: input7.dat
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
....................................................................Final Statistics:
	Total number of people processed: 500
	Total wait time: 0
	Average amount of time spent waiting: 0

	Totals for Teller 1:
		People processed: 167
		Wait time: 0
		Average wait time: 0

	Totals for Teller 2:
		People processed: 167
		Wait time: 0
		Average wait time: 0

	Totals for Teller 3:
		People processed: 166
		Wait time: 0
		Average wait time: 0
[4makka[24m:[1m~/cs1521/projects/project6/threeTeller/build[0m% ei[Kxit
exit

Script done on Tue 20 Nov 2018 12:36:50 PM CST
